‚Üê [[doom-module-index:][Back to module index]]               ! [[doom-module-issues:::lang rust][Issues]]  ‚Üñ [[doom-repo:tree/develop/modules/lang/rust/][Github]]  ¬± [[doom-suggest-edit:][Suggest edits]]  ? [[doom-help-modules:][Help]]
--------------------------------------------------------------------------------
#+TITLE:    :lang rust
#+SUBTITLE: Fe2O3.unwrap().unwrap().unwrap().unwrap()
#+CREATED:  September 30, 2015
#+SINCE:    0.7

* Description :unfold:
This module adds support for the Rust language and integration for its tools,
e.g. ~cargo~.

- Code completion ([[doom-package:][racer]] or an LSP server)
- Syntax checking ([[doom-package:][flycheck]])
- LSP support (for rust-analyzer and rls) ([[doom-package:][rustic]])
- Snippets

** Maintainers
- @hlissner

[[doom-contrib-maintainer:][Become a maintainer?]]

** Module flags
- +lsp ::
  Enable LSP support for ~rustic-mode~. Requires [[doom-module:][:tools lsp]] and a langserver
  (supports rust-analyzer and rls). Langservers are to be installed seperately.
  (Depending on OS/ Linux distribution. )

** Packages
- [[doom-package:][rustic]]
- [[doom-package:][racer]] unless [[doom-module:][+lsp]]

** Hacks
- rustic has been modified /not/ to automatically install lsp-mode or eglot if
  they're missing. Doom expects you to have enabled the [[doom-module:][:tools lsp]] module
  yourself.

** TODO Changelog
# This section will be machine generated. Don't edit it by hand.
/This module does not have a changelog yet./

* Installation
To enable this module in Doom Emacs, uncomment the line ~;;rust~ in ~$DOOMDIR/init.el~.
Run ~doom sync~ inside the shell afterwards.

This module requires a working installation of [[https://www.rust-lang.org/][Rust]]. The installation of
Rust depends on the OS / the Linux distribution. Some distros come with
Rust packages inside their repositories. Refer to the documentation/ the Wiki
of your Linux distro for further information.
The generic way to install Rust is via rustup, which can be acquired with
this command on Linux/ MacOS:
#+begin_src sh
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+end_src

For installation on MS Windows refer to the installation instructions
in the [[https://forge.rust-lang.org/infra/other-installation-methods.html][official Rust documentation.]]

** $PATH
For cargo to work properly add ~~/.cargo/bin~ to your $PATH environment variable.
(e.g. by adding ~export PATH="$HOME/.cargo/bin:$PATH"~ to your ~.bashrc~)
Since emacs uses its own environment variables you need to update them after
changing $PATH by running ~doom env~ in the shell. After that either restart emacs
or run ~doom/reload-env~ inside doom emacs.

** Other Requirements
- If [[doom-module:][:editor format]] is enabled, you'll need =rustfmt=: ~$ rustup component add
  rustfmt-preview~.
- Users without [[doom-module:][+lsp]] enabled will need [[doom-package:][racer]]: ~$ cargo +nightly install racer~
  (with requires rust nightly edition).
- Users with [[doom-module:][+lsp]] enabled will need:
  - [[github:rust-analyzer/rust-analyzer][rust-analyzer]]  or =rls=
- Using the following commands requires:
  - ~cargo-process-check~: ~$ cargo install cargo-check~
  - ~cargo-process-clippy~: ~$ rustup component add clippy-preview~

* TODO Usage
#+begin_quote
 üî® /This module's usage documentation is incomplete./ [[doom-contrib-module:][Complete it?]]
#+end_quote

** LSP support (rls or rust-analyzer)
This module supports LSP integration. For it to work you'll need:

1. Either [[https://github.com/rust-analyzer/rust-analyzer][rust-analyzer]] or [[https://github.com/rust-lang/rls][the Rust Language Server]] installed. (rust-analyzer
   is installed as a seperate package e.g. via your distributions package manager
   while the Rust Language Server is a part of Rust-Lang itself and can be installed
   via ~rustup component add rls rust-analysis rust-src~)
2. The [[doom-module:][:tools lsp]] module in ~init.el~ enabled.
3. The [[doom-module:][+lsp]] flag on this module enabled. To enable a flag on a module add it after the module in
   ~init.el~ and put that in parenthesis, e.g. change to line that says ~rust~ in ~init.el~ to ~(rust +lsp)~

** Format on save
Enable [[doom-module:][:editor format +onsave]] to get formatting on save with =rustfmt=. No
additional configuration is necessary.

** Keybinds
| Binding             | Description                 |
|---------------------+-----------------------------|
| =<localleader> b a= | ~cargo audit~               |
| =<localleader> b b= | ~cargo build~               |
| =<localleader> b B= | ~cargo bench~               |
| =<localleader> b c= | ~cargo check~               |
| =<localleader> b C= | ~cargo clippy~              |
| =<localleader> b d= | ~cargo doc~                 |
| =<localleader> b n= | ~cargo update~              |
| =<localleader> b o= | ~cargo outdated~            |
| =<localleader> b r= | ~cargo run~                 |
| =<localleader> t a= | ~cargo test~                |
| =<localleader> t t= | ~run current test~          |

* TODO Configuration
#+begin_quote
 üî® /This module's configuration documentation is incomplete./ [[doom-contrib-module:][Complete it?]]
#+end_quote

** Enable RLS by default
If both =rls= and =rust-analyzer= are present on your system, =rust-analyzer= is
used by default. Modify ~rustic-lsp-server~ to change the default:
#+begin_src emacs-lisp
;; in $DOOMDIR/config.el
(after! rustic
  (setq rustic-lsp-server 'rls))
#+end_src

** Enabling eglot support for Rust
Doom's [[doom-module:][:tools lsp]] module has an [[doom-module:][+eglot]] flag. Enable it and this module will use
eglot instead.

* Troubleshooting
[[doom-report:][Report an issue?]]

** error[E0670]: `async fn` is not permitted in the 2015 edition
You may be seeing this error, despite having ~edition = "2018"~ in your
=Cargo.toml=. This error actually originates from ~rustfmt~, which the LSP
server tries to invoke on save (if you have ~rustic-format-trigger~ or [[doom-module:][:editor
format]] enabled).

To fix this your project needs a =rustfmt.toml= with ~edition = "2018"~ in it.

** rust-analyzer not working with rustlings
[[github:rust-lang/rustlings][Rustlings]] is a popular resource to learn Rust. However, in its current state
rust-analyzer is not working with Rustlings.
The is a quick fix available in cargo:

#+begin_src sh
# Install rustlings-fix from cargo
cargo install rustlings-fix

# Change directory into wherever rustlings is cloned
cd ~/rustlings

# Run the binary
rustlings-fix
#+end_src
* Frequently asked questions
/This module has no FAQs yet./ [[doom-suggest-faq:][Ask one?]]

* TODO Appendix
#+begin_quote
 üî® This module has no appendix yet. [[doom-contrib-module:][Write one?]]
#+end_quote
